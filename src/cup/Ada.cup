package compiladorada;
import java_cup.runtime.*;
import java.io.*;


/* Inicializacion  */
parser code {: 
    public Object AST = null;
    public int errors = 0;

    public void report_error(String message, Object info) {
        errors++;
        System.out.println(message+" at");
        if ( info instanceof ComplexSymbolFactory.ComplexSymbol )
            System.out.println(info);
        else 
            System.err.println("Error : " + message);
    }
    public void report_fatal_error(String message, Object info) {
        try{
            report_error(message, info);
        }catch(Exception e){
            System.err.println("Fatal Syntax Error");
        }   
    }
:};

/* Terminales */
terminal PUT;
terminal GET;
terminal COMMA;
terminal SEMICOLON;
terminal COLON;
terminal LPAREN;
terminal RPAREN;

/* subprogramas: funciones y procedimientos */
terminal PROCEDURE;
terminal FUNCTION;
terminal IS; 
terminal RETURN; 
terminal IN; 
terminal OUT;
terminal BEGIN;
terminal END;

/* secuencias de control e iteradores */
terminal IF;
terminal THEN;
terminal ELSE;
terminal ELSIF;
terminal WHILE;
terminal LOOP;
terminal EXIT;
terminal WHEN;
terminal FOR;
terminal DOT_DOT;

/* Operadores */
terminal ASSIGN;    // :=
terminal OPLOG;     // and or
terminal OPREL;     // = /= < <= > >=
terminal OPSUM;     // + -
terminal OPMULT;    //* /
terminal NOT;       //not

/* literales */
terminal BOOLEAN, INTEGER, FLOAT;
terminal NULL;
terminal FALSE, TRUE;
terminal IDENTIFIER;
terminal STRING_LITERAL;
terminal CHAR_LITERAL;
terminal NUMERIC_LITERAL;

/* No-Terminales */
non terminal program;
non terminal subprogram_body;
non terminal opt_identifier;
non terminal subprogram_specification;
non terminal parameters_defs;
non terminal parameter_list;
non terminal parameter_definition;
non terminal parameter_name_list;
non terminal mode;
non terminal opt_def_expression;
non terminal declarative_part;
non terminal declarative_item;
non terminal object_declaration;
non terminal identifier_list;
non terminal sequence_of_statements;
non terminal statement;
non terminal null_statement;
non terminal assignment_statement;
non terminal return_statement;
non terminal exit_statement;
non terminal procedure_call_statement;
non terminal parameter_part;
non terminal parameters;
non terminal if_statement;
non terminal elsif_statements;
non terminal else_statement;
non terminal loop_statement;
non terminal iterator;
non terminal opt_expression;
non terminal expression;
non terminal relation;
non terminal simple_expression;
non terminal term;
non terminal factor;
non terminal primary;
non terminal name;
non terminal type;

/* Precedencia */
/* Gramatica */
start with program;

program                     ::= subprogram_body
                            ;

subprogram_body             ::= subprogram_specification IS
                                    declarative_part
                                BEGIN
                                    sequence_of_statements
                                END opt_identifier SEMICOLON
                            ;

opt_identifier              ::= IDENTIFIER
                            |
                            ;

subprogram_specification    ::= PROCEDURE IDENTIFIER parameters_defs
                            |   FUNCTION IDENTIFIER parameters_defs RETURN type
                            ;

parameters_defs             ::= LPAREN parameter_list RPAREN
                            |
                            ;

parameter_list              ::= parameter_definition
                            |   parameter_definition SEMICOLON parameter_list
                            ;

parameter_definition        ::= parameter_name_list COLON mode type opt_def_expression
                            ;

parameter_name_list         ::= IDENTIFIER
                            |   IDENTIFIER COMMA parameter_name_list
                            ;

mode                        ::= IN
                            |   IN OUT
                            |   OUT
                            |
                            ;

opt_def_expression          ::= ASSIGN expression
                            |
                            ;

declarative_part            ::= declarative_item declarative_part
                            |   
                            ;

declarative_item            ::= object_declaration 
                            |   subprogram_body
                            |   error
                            ;

object_declaration          ::= identifier_list COLON type opt_def_expression SEMICOLON
                            ;

identifier_list             ::= IDENTIFIER
                            |   IDENTIFIER COMMA identifier_list
                            ;

sequence_of_statements      ::= statement
                            |   statement sequence_of_statements
                            ;

statement                   ::= null_statement
                            |   assignment_statement
                            |   return_statement
                            |   exit_statement
                            |   procedure_call_statement
                            |   if_statement
                            |   loop_statement
                            |   PUT LPAREN expression COMMA expression RPAREN SEMICOLON
                            |   GET LPAREN expression RPAREN SEMICOLON
                            |   error SEMICOLON
                            ;

null_statement              ::= NULL SEMICOLON
                            ;

assignment_statement        ::= IDENTIFIER ASSIGN expression SEMICOLON
                            ;

return_statement            ::= RETURN opt_expression SEMICOLON
                            ;

exit_statement              ::= EXIT WHEN expression
                            ;

procedure_call_statement    ::= IDENTIFIER parameter_part SEMICOLON
                            ;

parameter_part              ::= LPAREN parameters RPAREN
                            |
                            ;

parameters                  ::= expression
                            |   expression COMMA expression
                            ;

if_statement                ::= IF expression THEN 
                                    sequence_of_statements
                                elsif_statements
                                else_statement
                                END IF SEMICOLON
                            ;

elsif_statements            ::= ELSIF expression THEN
                                    sequence_of_statements
                                elsif_statements
                            |
                            ;

else_statement              ::= ELSE
                                    sequence_of_statements
                            |
                            ;

loop_statement              ::= iterator LOOP
                                    sequence_of_statements
                                END LOOP SEMICOLON
                            ;

iterator                    ::= WHILE expression
                            |   FOR IDENTIFIER IN simple_expression DOT_DOT simple_expression
                            |
                            ;

opt_expression              ::= expression
                            |
                            ;

expression                  ::= relation
                            |   expression OPLOG relation
                            |   error
                            ;

relation                    ::= simple_expression
                            |   simple_expression OPREL simple_expression
                            ;

simple_expression           ::= term
                            |   simple_expression OPSUM term
                            ;

term                        ::= factor
                            |   term OPMULT factor
                            ;

factor                      ::= primary
                            |   NOT primary
                            ;

primary                     ::= name
                            |   NUMERIC_LITERAL
                            |   STRING_LITERAL
                            |   CHAR_LITERAL
                            |   NULL
                            |   LPAREN expression RPAREN
                            |   TRUE
                            |   FALSE
                            ;

name                        ::= IDENTIFIER
                            |   name LPAREN parameters RPAREN
                            ;

type                        ::= BOOLEAN
                            |   FLOAT
                            |   INTEGER
                            ;
