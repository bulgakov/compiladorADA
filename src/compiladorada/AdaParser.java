
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compiladorada;

import java_cup.runtime.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AdaParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public AdaParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AdaParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AdaParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\004\000\002\002\003\000\002\003" +
    "\012\000\002\004\003\000\002\004\002\000\002\005\005" +
    "\000\002\005\007\000\002\006\005\000\002\006\002\000" +
    "\002\007\003\000\002\007\005\000\002\010\007\000\002" +
    "\011\003\000\002\011\005\000\002\012\003\000\002\012" +
    "\004\000\002\012\003\000\002\012\002\000\002\013\004" +
    "\000\002\013\002\000\002\014\004\000\002\014\002\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\016\007\000\002\017\003\000\002\017\005\000\002\020" +
    "\003\000\002\020\004\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\011\000\002" +
    "\021\007\000\002\021\004\000\002\022\004\000\002\023" +
    "\006\000\002\024\005\000\002\025\005\000\002\026\005" +
    "\000\002\027\005\000\002\027\002\000\002\030\003\000" +
    "\002\030\005\000\002\031\013\000\002\032\007\000\002" +
    "\032\002\000\002\033\004\000\002\033\002\000\002\034" +
    "\010\000\002\035\004\000\002\035\010\000\002\035\002" +
    "\000\002\036\003\000\002\036\002\000\002\037\003\000" +
    "\002\037\005\000\002\037\003\000\002\040\003\000\002" +
    "\040\005\000\002\041\003\000\002\041\005\000\002\042" +
    "\003\000\002\042\005\000\002\043\003\000\002\043\004" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\005\000\002" +
    "\044\003\000\002\044\003\000\002\045\003\000\002\045" +
    "\006\000\002\046\003\000\002\046\003\000\002\046\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\006\013\005\014\010\001\002\000\004\002" +
    "\242\001\002\000\004\051\240\001\002\000\004\015\104" +
    "\001\002\000\004\002\000\001\002\000\004\051\011\001" +
    "\002\000\006\011\012\016\ufff9\001\002\000\004\051\023" +
    "\001\002\000\004\016\014\001\002\000\010\043\017\044" +
    "\015\045\020\001\002\000\012\007\uffae\012\uffae\015\uffae" +
    "\035\uffae\001\002\000\004\015\ufffb\001\002\000\012\007" +
    "\uffb0\012\uffb0\015\uffb0\035\uffb0\001\002\000\012\007\uffaf" +
    "\012\uffaf\015\uffaf\035\uffaf\001\002\000\006\007\102\012" +
    "\ufff8\001\002\000\004\010\030\001\002\000\006\006\026" +
    "\010\ufff5\001\002\000\004\012\025\001\002\000\006\015" +
    "\ufffa\016\ufffa\001\002\000\004\051\023\001\002\000\004" +
    "\010\ufff4\001\002\000\014\017\032\020\031\043\ufff0\044" +
    "\ufff0\045\ufff0\001\002\000\010\043\ufff1\044\ufff1\045\ufff1" +
    "\001\002\000\012\020\101\043\ufff3\044\ufff3\045\ufff3\001" +
    "\002\000\010\043\017\044\015\045\020\001\002\000\010" +
    "\007\uffee\012\uffee\035\036\001\002\000\006\007\ufff6\012" +
    "\ufff6\001\002\000\026\003\053\011\057\042\056\046\045" +
    "\047\047\050\044\051\054\052\046\053\055\054\037\001" +
    "\002\000\060\003\uffb9\004\uffb9\005\uffb9\006\uffb9\007\uffb9" +
    "\012\uffb9\016\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026" +
    "\uffb9\027\uffb9\030\uffb9\031\uffb9\033\uffb9\034\uffb9\036\uffb9" +
    "\037\uffb9\040\uffb9\041\uffb9\046\uffb9\051\uffb9\001\002\000" +
    "\062\003\uffba\004\uffba\005\uffba\006\uffba\007\uffba\011\073" +
    "\012\uffba\016\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026" +
    "\uffba\027\uffba\030\uffba\031\uffba\033\uffba\034\uffba\036\uffba" +
    "\037\uffba\040\uffba\041\uffba\046\uffba\051\uffba\001\002\000" +
    "\050\003\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5\012\uffc5" +
    "\016\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027" +
    "\uffc5\030\uffc5\031\uffc5\033\uffc5\036\uffc5\046\uffc5\051\uffc5" +
    "\001\002\000\060\003\uffbc\004\uffbc\005\uffbc\006\uffbc\007" +
    "\uffbc\012\uffbc\016\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc" +
    "\026\uffbc\027\uffbc\030\uffbc\031\uffbc\033\uffbc\034\uffbc\036" +
    "\uffbc\037\uffbc\040\uffbc\041\uffbc\046\uffbc\051\uffbc\001\002" +
    "\000\060\003\uffc0\004\uffc0\005\uffc0\006\uffc0\007\uffc0\012" +
    "\uffc0\016\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0" +
    "\027\uffc0\030\uffc0\031\uffc0\033\uffc0\034\uffc0\036\uffc0\037" +
    "\uffc0\040\uffc0\041\070\046\uffc0\051\uffc0\001\002\000\060" +
    "\003\uffb4\004\uffb4\005\uffb4\006\uffb4\007\uffb4\012\uffb4\016" +
    "\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4" +
    "\030\uffb4\031\uffb4\033\uffb4\034\uffb4\036\uffb4\037\uffb4\040" +
    "\uffb4\041\uffb4\046\uffb4\051\uffb4\001\002\000\060\003\uffb6" +
    "\004\uffb6\005\uffb6\006\uffb6\007\uffb6\012\uffb6\016\uffb6\022" +
    "\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6" +
    "\031\uffb6\033\uffb6\034\uffb6\036\uffb6\037\uffb6\040\uffb6\041" +
    "\uffb6\046\uffb6\051\uffb6\001\002\000\060\003\uffb8\004\uffb8" +
    "\005\uffb8\006\uffb8\007\uffb8\012\uffb8\016\uffb8\022\uffb8\023" +
    "\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8" +
    "\033\uffb8\034\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\046" +
    "\uffb8\051\uffb8\001\002\000\060\003\uffb3\004\uffb3\005\uffb3" +
    "\006\uffb3\007\uffb3\012\uffb3\016\uffb3\022\uffb3\023\uffb3\024" +
    "\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\033\uffb3" +
    "\034\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\046\uffb3\051" +
    "\uffb3\001\002\000\054\003\uffc2\004\uffc2\005\uffc2\006\uffc2" +
    "\007\uffc2\012\uffc2\016\uffc2\022\uffc2\023\uffc2\024\uffc2\025" +
    "\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\033\uffc2\036\uffc2" +
    "\037\065\040\066\046\uffc2\051\uffc2\001\002\000\010\007" +
    "\uffef\012\uffef\036\062\001\002\000\060\003\uffbe\004\uffbe" +
    "\005\uffbe\006\uffbe\007\uffbe\012\uffbe\016\uffbe\022\uffbe\023" +
    "\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe" +
    "\033\uffbe\034\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\046" +
    "\uffbe\051\uffbe\001\002\000\050\003\uffc3\004\uffc3\005\uffc3" +
    "\006\uffc3\007\uffc3\012\uffc3\016\uffc3\022\uffc3\023\uffc3\024" +
    "\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\033\uffc3" +
    "\036\uffc3\046\uffc3\051\uffc3\001\002\000\062\003\uffb2\004" +
    "\uffb2\005\uffb2\006\uffb2\007\uffb2\011\uffb2\012\uffb2\016\uffb2" +
    "\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030" +
    "\uffb2\031\uffb2\033\uffb2\034\uffb2\036\uffb2\037\uffb2\040\uffb2" +
    "\041\uffb2\046\uffb2\051\uffb2\001\002\000\060\003\uffb7\004" +
    "\uffb7\005\uffb7\006\uffb7\007\uffb7\012\uffb7\016\uffb7\022\uffb7" +
    "\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031" +
    "\uffb7\033\uffb7\034\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7" +
    "\046\uffb7\051\uffb7\001\002\000\022\011\057\046\045\047" +
    "\047\050\044\051\054\052\046\053\055\054\037\001\002" +
    "\000\026\003\053\011\057\042\056\046\045\047\047\050" +
    "\044\051\054\052\046\053\055\054\037\001\002\000\006" +
    "\012\061\036\062\001\002\000\060\003\uffb5\004\uffb5\005" +
    "\uffb5\006\uffb5\007\uffb5\012\uffb5\016\uffb5\022\uffb5\023\uffb5" +
    "\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\033" +
    "\uffb5\034\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\046\uffb5" +
    "\051\uffb5\001\002\000\024\011\057\042\056\046\045\047" +
    "\047\050\044\051\054\052\046\053\055\054\037\001\002" +
    "\000\050\003\uffc4\004\uffc4\005\uffc4\006\uffc4\007\uffc4\012" +
    "\uffc4\016\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4" +
    "\027\uffc4\030\uffc4\031\uffc4\033\uffc4\036\uffc4\046\uffc4\051" +
    "\uffc4\001\002\000\060\003\uffbb\004\uffbb\005\uffbb\006\uffbb" +
    "\007\uffbb\012\uffbb\016\uffbb\022\uffbb\023\uffbb\024\uffbb\025" +
    "\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\033\uffbb\034\uffbb" +
    "\036\uffbb\037\uffbb\040\uffbb\041\uffbb\046\uffbb\051\uffbb\001" +
    "\002\000\024\011\057\042\056\046\045\047\047\050\044" +
    "\051\054\052\046\053\055\054\037\001\002\000\024\011" +
    "\057\042\056\046\045\047\047\050\044\051\054\052\046" +
    "\053\055\054\037\001\002\000\060\003\uffbf\004\uffbf\005" +
    "\uffbf\006\uffbf\007\uffbf\012\uffbf\016\uffbf\022\uffbf\023\uffbf" +
    "\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\033" +
    "\uffbf\034\uffbf\036\uffbf\037\uffbf\040\uffbf\041\070\046\uffbf" +
    "\051\uffbf\001\002\000\024\011\057\042\056\046\045\047" +
    "\047\050\044\051\054\052\046\053\055\054\037\001\002" +
    "\000\060\003\uffbd\004\uffbd\005\uffbd\006\uffbd\007\uffbd\012" +
    "\uffbd\016\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd" +
    "\027\uffbd\030\uffbd\031\uffbd\033\uffbd\034\uffbd\036\uffbd\037" +
    "\uffbd\040\uffbd\041\uffbd\046\uffbd\051\uffbd\001\002\000\052" +
    "\003\uffc1\004\uffc1\005\uffc1\006\uffc1\007\uffc1\012\uffc1\016" +
    "\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1" +
    "\030\uffc1\031\uffc1\033\uffc1\036\uffc1\040\066\046\uffc1\051" +
    "\uffc1\001\002\000\026\003\053\011\057\042\056\046\045" +
    "\047\047\050\044\051\054\052\046\053\055\054\037\001" +
    "\002\000\004\012\100\001\002\000\010\006\076\012\uffd2" +
    "\036\062\001\002\000\026\003\053\011\057\042\056\046" +
    "\045\047\047\050\044\051\054\052\046\053\055\054\037" +
    "\001\002\000\006\012\uffd1\036\062\001\002\000\062\003" +
    "\uffb1\004\uffb1\005\uffb1\006\uffb1\007\uffb1\011\uffb1\012\uffb1" +
    "\016\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027" +
    "\uffb1\030\uffb1\031\uffb1\033\uffb1\034\uffb1\036\uffb1\037\uffb1" +
    "\040\uffb1\041\uffb1\046\uffb1\051\uffb1\001\002\000\010\043" +
    "\ufff2\044\ufff2\045\ufff2\001\002\000\004\051\023\001\002" +
    "\000\004\012\ufff7\001\002\000\014\003\111\013\005\014" +
    "\010\021\uffec\051\113\001\002\000\014\003\111\013\005" +
    "\014\010\021\uffec\051\113\001\002\000\014\003\uffea\013" +
    "\uffea\014\uffea\021\uffea\051\uffea\001\002\000\014\003\uffeb" +
    "\013\uffeb\014\uffeb\021\uffeb\051\uffeb\001\002\000\004\021" +
    "\122\001\002\000\014\003\uffe9\013\uffe9\014\uffe9\021\uffe9" +
    "\051\uffe9\001\002\000\004\010\116\001\002\000\006\006" +
    "\114\010\uffe7\001\002\000\004\051\113\001\002\000\004" +
    "\010\uffe6\001\002\000\010\043\017\044\015\045\020\001" +
    "\002\000\006\007\uffee\035\036\001\002\000\004\007\121" +
    "\001\002\000\014\003\uffe8\013\uffe8\014\uffe8\021\uffe8\051" +
    "\uffe8\001\002\000\030\003\140\004\134\005\146\016\130" +
    "\023\133\027\126\030\uffc8\031\123\033\142\046\143\051" +
    "\131\001\002\000\004\032\235\001\002\000\036\003\140" +
    "\004\134\005\146\016\130\022\uffe5\023\133\025\uffe5\026" +
    "\uffe5\027\126\030\uffc8\031\123\033\142\046\143\051\131" +
    "\001\002\000\036\003\uffde\004\uffde\005\uffde\016\uffde\022" +
    "\uffde\023\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde" +
    "\033\uffde\046\uffde\051\uffde\001\002\000\026\003\053\011" +
    "\057\042\056\046\045\047\047\050\044\051\054\052\046" +
    "\053\055\054\037\001\002\000\036\003\uffe3\004\uffe3\005" +
    "\uffe3\016\uffe3\022\uffe3\023\uffe3\025\uffe3\026\uffe3\027\uffe3" +
    "\030\uffe3\031\uffe3\033\uffe3\046\uffe3\051\uffe3\001\002\000" +
    "\030\003\053\007\uffc6\011\057\042\056\046\045\047\047" +
    "\050\044\051\054\052\046\053\055\054\037\001\002\000" +
    "\010\007\uffd3\011\221\035\222\001\002\000\036\003\uffe2" +
    "\004\uffe2\005\uffe2\016\uffe2\022\uffe2\023\uffe2\025\uffe2\026" +
    "\uffe2\027\uffe2\030\uffe2\031\uffe2\033\uffe2\046\uffe2\051\uffe2" +
    "\001\002\000\026\003\053\011\057\042\056\046\045\047" +
    "\047\050\044\051\054\052\046\053\055\054\037\001\002" +
    "\000\004\011\173\001\002\000\036\003\uffdd\004\uffdd\005" +
    "\uffdd\016\uffdd\022\uffdd\023\uffdd\025\uffdd\026\uffdd\027\uffdd" +
    "\030\uffdd\031\uffdd\033\uffdd\046\uffdd\051\uffdd\001\002\000" +
    "\036\003\uffdf\004\uffdf\005\uffdf\016\uffdf\022\uffdf\023\uffdf" +
    "\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\033\uffdf\046" +
    "\uffdf\051\uffdf\001\002\000\004\030\166\001\002\000\004" +
    "\007\165\001\002\000\036\003\uffe0\004\uffe0\005\uffe0\016" +
    "\uffe0\022\uffe0\023\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0" +
    "\031\uffe0\033\uffe0\046\uffe0\051\uffe0\001\002\000\004\051" +
    "\160\001\002\000\004\007\157\001\002\000\004\022\153" +
    "\001\002\000\036\003\uffe1\004\uffe1\005\uffe1\016\uffe1\022" +
    "\uffe1\023\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1" +
    "\033\uffe1\046\uffe1\051\uffe1\001\002\000\004\011\147\001" +
    "\002\000\026\003\053\011\057\042\056\046\045\047\047" +
    "\050\044\051\054\052\046\053\055\054\037\001\002\000" +
    "\006\012\151\036\062\001\002\000\004\007\152\001\002" +
    "\000\036\003\uffdb\004\uffdb\005\uffdb\016\uffdb\022\uffdb\023" +
    "\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\033\uffdb" +
    "\046\uffdb\051\uffdb\001\002\000\006\007\ufffd\051\155\001" +
    "\002\000\004\007\156\001\002\000\004\007\ufffe\001\002" +
    "\000\016\002\uffff\003\uffff\013\uffff\014\uffff\021\uffff\051" +
    "\uffff\001\002\000\036\003\uffd9\004\uffd9\005\uffd9\016\uffd9" +
    "\022\uffd9\023\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031" +
    "\uffd9\033\uffd9\046\uffd9\051\uffd9\001\002\000\004\017\161" +
    "\001\002\000\024\011\057\042\056\046\045\047\047\050" +
    "\044\051\054\052\046\053\055\054\037\001\002\000\006" +
    "\034\163\040\066\001\002\000\024\011\057\042\056\046" +
    "\045\047\047\050\044\051\054\052\046\053\055\054\037" +
    "\001\002\000\006\030\uffc9\040\066\001\002\000\036\003" +
    "\uffda\004\uffda\005\uffda\016\uffda\022\uffda\023\uffda\025\uffda" +
    "\026\uffda\027\uffda\030\uffda\031\uffda\033\uffda\046\uffda\051" +
    "\uffda\001\002\000\030\003\140\004\134\005\146\016\130" +
    "\023\133\027\126\030\uffc8\031\123\033\142\046\143\051" +
    "\131\001\002\000\004\022\170\001\002\000\004\030\171" +
    "\001\002\000\004\007\172\001\002\000\036\003\uffcb\004" +
    "\uffcb\005\uffcb\016\uffcb\022\uffcb\023\uffcb\025\uffcb\026\uffcb" +
    "\027\uffcb\030\uffcb\031\uffcb\033\uffcb\046\uffcb\051\uffcb\001" +
    "\002\000\026\003\053\011\057\042\056\046\045\047\047" +
    "\050\044\051\054\052\046\053\055\054\037\001\002\000" +
    "\006\006\175\036\062\001\002\000\026\003\053\011\057" +
    "\042\056\046\045\047\047\050\044\051\054\052\046\053" +
    "\055\054\037\001\002\000\006\012\177\036\062\001\002" +
    "\000\004\007\200\001\002\000\036\003\uffdc\004\uffdc\005" +
    "\uffdc\016\uffdc\022\uffdc\023\uffdc\025\uffdc\026\uffdc\027\uffdc" +
    "\030\uffdc\031\uffdc\033\uffdc\046\uffdc\051\uffdc\001\002\000" +
    "\006\024\202\036\062\001\002\000\030\003\140\004\134" +
    "\005\146\016\130\023\133\027\126\030\uffc8\031\123\033" +
    "\142\046\143\051\131\001\002\000\010\022\uffce\025\uffce" +
    "\026\205\001\002\000\006\022\uffcc\025\212\001\002\000" +
    "\026\003\053\011\057\042\056\046\045\047\047\050\044" +
    "\051\054\052\046\053\055\054\037\001\002\000\006\024" +
    "\207\036\062\001\002\000\030\003\140\004\134\005\146" +
    "\016\130\023\133\027\126\030\uffc8\031\123\033\142\046" +
    "\143\051\131\001\002\000\010\022\uffce\025\uffce\026\205" +
    "\001\002\000\006\022\uffcf\025\uffcf\001\002\000\030\003" +
    "\140\004\134\005\146\016\130\023\133\027\126\030\uffc8" +
    "\031\123\033\142\046\143\051\131\001\002\000\004\022" +
    "\214\001\002\000\004\023\215\001\002\000\004\007\216" +
    "\001\002\000\036\003\uffd0\004\uffd0\005\uffd0\016\uffd0\022" +
    "\uffd0\023\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0" +
    "\033\uffd0\046\uffd0\051\uffd0\001\002\000\004\022\uffcd\001" +
    "\002\000\004\007\227\001\002\000\026\003\053\011\057" +
    "\042\056\046\045\047\047\050\044\051\054\052\046\053" +
    "\055\054\037\001\002\000\026\003\053\011\057\042\056" +
    "\046\045\047\047\050\044\051\054\052\046\053\055\054" +
    "\037\001\002\000\006\007\224\036\062\001\002\000\036" +
    "\003\uffd8\004\uffd8\005\uffd8\016\uffd8\022\uffd8\023\uffd8\025" +
    "\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\033\uffd8\046\uffd8" +
    "\051\uffd8\001\002\000\004\012\226\001\002\000\004\007" +
    "\uffd4\001\002\000\036\003\uffd5\004\uffd5\005\uffd5\016\uffd5" +
    "\022\uffd5\023\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031" +
    "\uffd5\033\uffd5\046\uffd5\051\uffd5\001\002\000\004\007\232" +
    "\001\002\000\006\007\uffc7\036\062\001\002\000\036\003" +
    "\uffd7\004\uffd7\005\uffd7\016\uffd7\022\uffd7\023\uffd7\025\uffd7" +
    "\026\uffd7\027\uffd7\030\uffd7\031\uffd7\033\uffd7\046\uffd7\051" +
    "\uffd7\001\002\000\006\030\uffca\036\062\001\002\000\010" +
    "\022\uffe4\025\uffe4\026\uffe4\001\002\000\026\003\053\011" +
    "\057\042\056\046\045\047\047\050\044\051\054\052\046" +
    "\053\055\054\037\001\002\000\040\003\uffd6\004\uffd6\005" +
    "\uffd6\016\uffd6\022\uffd6\023\uffd6\025\uffd6\026\uffd6\027\uffd6" +
    "\030\uffd6\031\uffd6\033\uffd6\036\062\046\uffd6\051\uffd6\001" +
    "\002\000\004\021\uffed\001\002\000\006\011\012\015\ufff9" +
    "\001\002\000\004\015\ufffc\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\010\002\003\003\006\005\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\012\001\001\000" +
    "\010\007\023\010\020\011\021\001\001\000\002\001\001" +
    "\000\004\046\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\026\001\001\000\002\001\001" +
    "\000\004\012\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\033\001\001\000\004\013\034\001\001" +
    "\000\002\001\001\000\020\037\050\040\040\041\047\042" +
    "\042\043\051\044\041\045\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\044\063\045\037\001\001\000" +
    "\020\037\057\040\040\041\047\042\042\043\051\044\041" +
    "\045\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\040\062\041\047\042\042\043\051\044\041\045\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\041" +
    "\071\042\042\043\051\044\041\045\037\001\001\000\012" +
    "\042\066\043\051\044\041\045\037\001\001\000\002\001" +
    "\001\000\010\043\070\044\041\045\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\030\073\037\074\040" +
    "\040\041\047\042\042\043\051\044\041\045\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\037\076\040" +
    "\040\041\047\042\042\043\051\044\041\045\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\102\010\020\011\021\001\001\000\002\001\001" +
    "\000\016\003\105\005\005\014\107\015\104\016\106\017" +
    "\111\001\001\000\016\003\105\005\005\014\236\015\104" +
    "\016\106\017\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\114\001\001\000\002\001" +
    "\001\000\004\046\116\001\001\000\004\013\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\020\143\021" +
    "\123\022\126\023\131\024\144\025\140\026\135\031\124" +
    "\034\134\035\136\001\001\000\002\001\001\000\026\020" +
    "\233\021\123\022\126\023\131\024\144\025\140\026\135" +
    "\031\124\034\134\035\136\001\001\000\002\001\001\000" +
    "\020\037\232\040\040\041\047\042\042\043\051\044\041" +
    "\045\037\001\001\000\002\001\001\000\022\036\227\037" +
    "\230\040\040\041\047\042\042\043\051\044\041\045\037" +
    "\001\001\000\004\027\217\001\001\000\002\001\001\000" +
    "\020\037\200\040\040\041\047\042\042\043\051\044\041" +
    "\045\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\037\147" +
    "\040\040\041\047\042\042\043\051\044\041\045\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\153\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\041\161\042\042\043\051\044\041\045\037\001" +
    "\001\000\002\001\001\000\014\041\163\042\042\043\051" +
    "\044\041\045\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\020\166\021\123\022\126\023\131\024\144" +
    "\025\140\026\135\031\124\034\134\035\136\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\037\173\040\040\041\047\042\042\043" +
    "\051\044\041\045\037\001\001\000\002\001\001\000\020" +
    "\037\175\040\040\041\047\042\042\043\051\044\041\045" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\020\202\021\123\022" +
    "\126\023\131\024\144\025\140\026\135\031\124\034\134" +
    "\035\136\001\001\000\004\032\203\001\001\000\004\033" +
    "\212\001\001\000\020\037\205\040\040\041\047\042\042" +
    "\043\051\044\041\045\037\001\001\000\002\001\001\000" +
    "\026\020\207\021\123\022\126\023\131\024\144\025\140" +
    "\026\135\031\124\034\134\035\136\001\001\000\004\032" +
    "\210\001\001\000\002\001\001\000\026\020\216\021\123" +
    "\022\126\023\131\024\144\025\140\026\135\031\124\034" +
    "\134\035\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\030\224\037\074\040\040\041\047" +
    "\042\042\043\051\044\041\045\037\001\001\000\020\037" +
    "\222\040\040\041\047\042\042\043\051\044\041\045\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\037\235\040\040\041\047\042\042" +
    "\043\051\044\041\045\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\240\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AdaParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AdaParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AdaParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
    public Object AST = null;
    public int errors = 0;

    public void report_error(String message, Object info) {
        errors++;
        System.out.println(message+" at");
        if ( info instanceof ComplexSymbolFactory.ComplexSymbol )
            System.out.println(info);
        else 
            System.err.println("Error : " + message);
    }
    public void report_fatal_error(String message, Object info) {
        try{
            report_error(message, info);
        }catch(Exception e){
            System.err.println("Fatal Syntax Error");
        }   
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AdaParser$actions {
  private final AdaParser parser;

  /** Constructor */
  CUP$AdaParser$actions(AdaParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AdaParser$do_action_part00000000(
    int                        CUP$AdaParser$act_num,
    java_cup.runtime.lr_parser CUP$AdaParser$parser,
    java.util.Stack            CUP$AdaParser$stack,
    int                        CUP$AdaParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AdaParser$result;

      /* select the action based on the action number */
      switch (CUP$AdaParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AdaParser$stack.elementAt(CUP$AdaParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AdaParser$stack.elementAt(CUP$AdaParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AdaParser$stack.elementAt(CUP$AdaParser$top-1)).value;
		RESULT = start_val;
              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.elementAt(CUP$AdaParser$top-1)), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AdaParser$parser.done_parsing();
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= subprogram_body 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // subprogram_body ::= subprogram_specification IS declarative_part BEGIN sequence_of_statements END opt_identifier SEMICOLON 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("subprogram_body",1, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.elementAt(CUP$AdaParser$top-7)), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // opt_identifier ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("opt_identifier",2, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // opt_identifier ::= 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("opt_identifier",2, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // subprogram_specification ::= PROCEDURE IDENTIFIER parameters_defs 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("subprogram_specification",3, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.elementAt(CUP$AdaParser$top-2)), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // subprogram_specification ::= FUNCTION IDENTIFIER parameters_defs RETURN type 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("subprogram_specification",3, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.elementAt(CUP$AdaParser$top-4)), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parameters_defs ::= LPAREN parameter_list RPAREN 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("parameters_defs",4, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.elementAt(CUP$AdaParser$top-2)), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parameters_defs ::= 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("parameters_defs",4, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // parameter_list ::= parameter_definition 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("parameter_list",5, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // parameter_list ::= parameter_definition SEMICOLON parameter_list 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("parameter_list",5, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.elementAt(CUP$AdaParser$top-2)), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parameter_definition ::= parameter_name_list COLON mode type opt_def_expression 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("parameter_definition",6, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.elementAt(CUP$AdaParser$top-4)), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parameter_name_list ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("parameter_name_list",7, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parameter_name_list ::= IDENTIFIER COMMA parameter_name_list 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("parameter_name_list",7, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.elementAt(CUP$AdaParser$top-2)), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // mode ::= IN 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("mode",8, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // mode ::= IN OUT 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("mode",8, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.elementAt(CUP$AdaParser$top-1)), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // mode ::= OUT 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("mode",8, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // mode ::= 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("mode",8, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // opt_def_expression ::= ASSIGN expression 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("opt_def_expression",9, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.elementAt(CUP$AdaParser$top-1)), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // opt_def_expression ::= 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("opt_def_expression",9, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declarative_part ::= declarative_item declarative_part 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("declarative_part",10, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.elementAt(CUP$AdaParser$top-1)), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declarative_part ::= 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("declarative_part",10, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declarative_item ::= object_declaration 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("declarative_item",11, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declarative_item ::= subprogram_body 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("declarative_item",11, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declarative_item ::= error 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("declarative_item",11, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // object_declaration ::= identifier_list COLON type opt_def_expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("object_declaration",12, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.elementAt(CUP$AdaParser$top-4)), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // identifier_list ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("identifier_list",13, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // identifier_list ::= IDENTIFIER COMMA identifier_list 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("identifier_list",13, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.elementAt(CUP$AdaParser$top-2)), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sequence_of_statements ::= statement 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("sequence_of_statements",14, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sequence_of_statements ::= statement sequence_of_statements 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("sequence_of_statements",14, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.elementAt(CUP$AdaParser$top-1)), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= null_statement 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= assignment_statement 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= return_statement 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= exit_statement 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= procedure_call_statement 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= if_statement 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= loop_statement 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= PUT LPAREN expression COMMA expression RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.elementAt(CUP$AdaParser$top-6)), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= GET LPAREN expression RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.elementAt(CUP$AdaParser$top-4)), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= error SEMICOLON 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.elementAt(CUP$AdaParser$top-1)), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // null_statement ::= NULL SEMICOLON 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("null_statement",16, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.elementAt(CUP$AdaParser$top-1)), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // assignment_statement ::= IDENTIFIER ASSIGN expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("assignment_statement",17, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.elementAt(CUP$AdaParser$top-3)), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // return_statement ::= RETURN opt_expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("return_statement",18, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.elementAt(CUP$AdaParser$top-2)), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exit_statement ::= EXIT WHEN expression 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("exit_statement",19, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.elementAt(CUP$AdaParser$top-2)), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // procedure_call_statement ::= IDENTIFIER parameter_part SEMICOLON 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("procedure_call_statement",20, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.elementAt(CUP$AdaParser$top-2)), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parameter_part ::= LPAREN parameters RPAREN 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("parameter_part",21, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.elementAt(CUP$AdaParser$top-2)), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parameter_part ::= 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("parameter_part",21, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parameters ::= expression 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("parameters",22, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parameters ::= expression COMMA expression 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("parameters",22, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.elementAt(CUP$AdaParser$top-2)), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // if_statement ::= IF expression THEN sequence_of_statements elsif_statements else_statement END IF SEMICOLON 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("if_statement",23, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.elementAt(CUP$AdaParser$top-8)), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // elsif_statements ::= ELSIF expression THEN sequence_of_statements elsif_statements 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("elsif_statements",24, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.elementAt(CUP$AdaParser$top-4)), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // elsif_statements ::= 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("elsif_statements",24, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // else_statement ::= ELSE sequence_of_statements 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("else_statement",25, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.elementAt(CUP$AdaParser$top-1)), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // else_statement ::= 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("else_statement",25, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // loop_statement ::= iterator LOOP sequence_of_statements END LOOP SEMICOLON 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("loop_statement",26, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.elementAt(CUP$AdaParser$top-5)), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // iterator ::= WHILE expression 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("iterator",27, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.elementAt(CUP$AdaParser$top-1)), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // iterator ::= FOR IDENTIFIER IN simple_expression DOT_DOT simple_expression 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("iterator",27, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.elementAt(CUP$AdaParser$top-5)), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // iterator ::= 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("iterator",27, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // opt_expression ::= expression 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("opt_expression",28, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // opt_expression ::= 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("opt_expression",28, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= relation 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= expression OPLOG relation 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.elementAt(CUP$AdaParser$top-2)), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= error 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // relation ::= simple_expression 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("relation",30, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // relation ::= simple_expression OPREL simple_expression 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("relation",30, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.elementAt(CUP$AdaParser$top-2)), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // simple_expression ::= term 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("simple_expression",31, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // simple_expression ::= simple_expression OPSUM term 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("simple_expression",31, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.elementAt(CUP$AdaParser$top-2)), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // term ::= factor 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("term",32, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // term ::= term OPMULT factor 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("term",32, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.elementAt(CUP$AdaParser$top-2)), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // factor ::= primary 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("factor",33, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // factor ::= NOT primary 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("factor",33, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.elementAt(CUP$AdaParser$top-1)), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // primary ::= name 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("primary",34, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // primary ::= NUMERIC_LITERAL 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("primary",34, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // primary ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("primary",34, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // primary ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("primary",34, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // primary ::= NULL 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("primary",34, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // primary ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("primary",34, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.elementAt(CUP$AdaParser$top-2)), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // primary ::= TRUE 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("primary",34, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // primary ::= FALSE 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("primary",34, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // name ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("name",35, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // name ::= name LPAREN parameters RPAREN 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("name",35, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.elementAt(CUP$AdaParser$top-3)), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // type ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("type",36, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // type ::= FLOAT 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("type",36, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // type ::= INTEGER 
            {
              Object RESULT =null;

              CUP$AdaParser$result = parser.getSymbolFactory().newSymbol("type",36, ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AdaParser$stack.peek()), RESULT);
            }
          return CUP$AdaParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AdaParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AdaParser$do_action(
    int                        CUP$AdaParser$act_num,
    java_cup.runtime.lr_parser CUP$AdaParser$parser,
    java.util.Stack            CUP$AdaParser$stack,
    int                        CUP$AdaParser$top)
    throws java.lang.Exception
    {
              return CUP$AdaParser$do_action_part00000000(
                               CUP$AdaParser$act_num,
                               CUP$AdaParser$parser,
                               CUP$AdaParser$stack,
                               CUP$AdaParser$top);
    }
}

}
